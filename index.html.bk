<!DOCTYPE html>
<html lang="en">
<head>
    <title>前海环境取证</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <!-- <script src="public/js/axios.min.js"></script> -->
    <script src="./js/axios.min.js"></script>
    <style>
        body {
            margin: 0;
            background-color: dimgrey;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        html {
            height: 100%;
        }

        #top_bar {
            /* background-color: #6e84a3; */
            color: white;
            /* font: bold 12px Helvetica; */
            /* padding: 6px 5px 4px 5px;
            border-bottom: 1px outset; */
        }
        #status {
            text-align: center;
        }
        #sendCtrlAltDelButton {
            position: fixed;
            top: 0px;
            right: 0px;
            border: 1px outset;
            padding: 5px 5px 4px 5px;
            cursor: pointer;
        }
        #start {
            position: fixed;
            top: 0px;
            left: 0px;
            border: 1px outset;
            padding: 5px 5px 4px 5px;
            cursor: pointer;
        }
        #end {
            position: fixed;
            top: 0px;
            left: 100px;
            border: 1px outset;
            padding: 5px 5px 4px 5px;
            cursor: pointer;
        }
        #screen {
            flex: 1; /* fill remaining space */
            overflow: hidden;
        }
        .header_part{
            font-size: 14px;
            width:100%;
            background: #000000;
            border: 0;
            display: flex;
            align-items: center;
            justify-content: space-around;
        }
        .header_part .time_part{
            padding:4px 9px;
            background-color: #FE3B30;
        }
    </style>

    <script type="module" crossorigin="anonymous">
        // RFB holds the API to connect and communicate with a VNC server
        // import RFB from './js/vnc/rfb.js'

        let rfb;
        let desktopName;

        // When this function is called we have
        // successfully connected to a server
        function connectedToServer(e) {
            status("Connected to " + desktopName);
        }

        // This function is called when we are disconnected
        function disconnectedFromServer(e) {
            if (e.detail.clean) {
                status("Disconnected");
            } else {
                status("Something went wrong, connection is closed");
            }
        }

        // When this function is called, the server requires
        // credentials to authenticate
        function credentialsAreRequired(e) {
            // const password = prompt("Password Required:");
            rfb.sendCredentials({ password: "XZAvYpe4fo61GFbZAUjP" });
        }

        // When this function is called we have received
        // a desktop name from the server
        function updateDesktopName(e) {
            desktopName = e.detail.name;
        }

        // Since most operating systems will catch Ctrl+Alt+Del
        // before they get a chance to be intercepted by the browser,
        // we provide a way to emulate this key sequence.
        function sendCtrlAltDel() {
            rfb.sendCtrlAltDel();
            return false;
        }

        // Show a status text in the top bar
        function status(text) {
            document.getElementById('status').textContent = text;
        }

        // This function extracts the value of one variable from the
        // query string. If the variable isn't defined in the URL
        // it returns the default value instead.
        function readQueryVariable(name, defaultValue) {
            // A URL with a query parameter can look like this:
            // https://www.example.com?myqueryparam=myvalue
            //
            // Note that we use location.href instead of location.search
            // because Firefox < 53 has a bug w.r.t location.search
            const re = new RegExp('.*[?&]' + name + '=([^&#]*)'),
                  match = document.location.href.match(re);

            if (match) {
                // We have to decode the URL since want the cleartext value
                return decodeURIComponent(match[1]);
            }

            return defaultValue;
        }

        document.getElementById('sendCtrlAltDelButton')
            .onclick = sendCtrlAltDel;

        // Read parameters specified in the URL query string
        // By default, use the host and port of server that served this file
        const host = readQueryVariable('host', window.location.hostname);
        let port = readQueryVariable('port', window.location.port);
        const password = readQueryVariable('password');
        const path = readQueryVariable('path', 'ws');

        // | | |         | | |
        // | | | Connect | | |
        // v v v         v v v

        status("Connecting");

        // Build the websocket URL used to connect
        let url;
        if (window.location.protocol === "https:") {
            url = 'wss';
        } else {
            url = 'ws';
        }
        url += '://' + host;
        if(port) {
            url += ':' + port;
        }
        url += '/' + path;
 

        function connectWs(token) {
            let u= url;
            u += `?token=${token}`;

            // Creating a new RFB object will start a new connection
            rfb = new RFB(document.getElementById('screen'), u,
                                { credentials: { password: password } });

            // Add listeners to important events from the RFB module
            rfb.addEventListener("connect",  connectedToServer);
            rfb.addEventListener("disconnect", disconnectedFromServer);
            rfb.addEventListener("credentialsrequired", credentialsAreRequired);
            rfb.addEventListener("desktopname", updateDesktopName);

            // Set parameters that can be changed on an active connection
            // rfb.viewOnly = readQueryVariable('view_only', false);
            // rfb.scaleViewport = readQueryVariable('scale', false);
            rfb.scaleViewport = true;
            rfb.showDotCursor = true;
        }
        function handleStart (e) {
            // const url = `/api/evidence/start?evidenceid=12345`
            const url = `/api/evidence/start?evidenceid=${e}`
            axios.get(url)
            .then(function (response) {
                console.log(response);
                if (response.data && response.data.code == 0) {
                    let peer = response.data.data;
                    connectWs(peer.id)
                }
            })
            .catch(function (error) {
                console.log(error);
            });
        }
        function handleEnd () {
            axios.get('/api/evidence/end?evidenceid=12345')
            .then(function (response) {
                console.log(response);
                if (response.data && response.data.code == 0) {
                    let peer = response.data.data;
                    console.log(peer)
                }
            })
            .catch(function (error) {
                console.log(error);
            });
        }
        document.getElementById("start").addEventListener("click", handleStart)
        document.getElementById("end").addEventListener("click", handleEnd)
        window.onload = function () {
            // handleStart()
            // const url = window.location.href
            // const daId = url.split('daId=')
            // connectWs(daId[1])
            confirm('1212312')
        }
    </script>
</head>

<body>
    <div id="top_bar">
        <div id="status" style='display: none'>Loading</div>
        <button id="start" style='display: none'>start</button>
        <button id="end" style='display: none'>end</button>
        <div id="sendCtrlAltDelButton" style='display: none'>Send CtrlAltDel</div>
        <div class='header_part'>
            <p class='readoing'>录制中</p>
            <p class='time_part'>00:00:00</p>
            <p style='width: 40px;'></p>
        </div>
    </div>
    <div id="screen">
        <!-- This is where the remote screen will appear -->
    </div>
    
</body>
</html>
